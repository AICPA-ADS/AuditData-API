#------LICENSE--------
#MIT License
#
#Copyright (c) 2020 AICPA

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


#--------OUTSTANDING ITEMS  -----------

# PAGINATION
# Define pagination scheme if this implemented by an API provider. Don't want implementers to use different 
# schemes thus making the API incompatible.

# Security
# Need to document approach to security and authentication.

# GL Adjustments
# Should the standard cover adjustments proposed by the auditors.


openapi: 3.0.0
servers:
  - url: /AuditDataOpenAPI/v1.0
info:
  version: "1.0.0"
  title: Audit Data Open Api Project (AICPA)
  description: This is an initial API specification for requesting data for performing audits

tags:
  - name: General Ledger Module
    description: Used to request General Ledger Information
  - name: Base Module
    description: Used across modules.

# Security schemes are included below to support generation of 
# authentication code in the AuditData Client packages.
# The standard takes no position on authentication schemes, which
# are an implementation decision
security:
  - basicAuth: [] 
  - implicitAuth:
      - read
  - bearerAuth: []
  - apiKeyAuth: 
      - read
  - openIdAuth:
      - read
  
paths:
  /GL/Journals:
    get:
      operationId: GetGLDetails
      tags: [General Ledger Module]      
      description: >
       Allows searching for General Ledger Journal Transactions
      parameters:
        - name: startDate
          in: query
          description: Start date for GL transactions.  Returns all transactions with an `EffectiveDate` after `the startDate`.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for GL transactions.  Returns all transactions with an `EffectiveDate` before `the endDate`.
          required: false
          schema:
            type: string
            format: date

        - $ref: '#/components/parameters/entityIdRequiredParam'
           
        
      responses:
        '200':
          description: __GLDetails__ successfully accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GLJournals'

        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /GL/TrialBalance:
    get:
      operationId: GetTBDetails
      tags: [General Ledger Module]      
      description: >
        Allows searching for General Ledger Trial Balance Totals. Returns JSON responses (required for all implementaiton). Optionally, returns XBRL-formatted JSON documents, which should be requested by the calling client using the `Accept: application/xbrl+json` HTTP header.
      parameters:
        - name: startDate
          in: query
          description: Start date (No time) for Trial Balance.  Returns balances at the start of the year after opening adjustments to retained earnings and adjustments for changes in accounting standards.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for the trial balance.  Returns all the values at the provided `endDate`, which may also be treated as an "as of" date.
          required: true
          schema:
            type: string
            format: date
        
        - name: BudgetFlag
          in: query
          description: Flag to indicate if budget data should be returned. If not provided the default is actual data. To get budget data only a parameter of "budget" is used. To get both a parameter of "both" is passed.
          required: false
          schema:
            type: string
            enum: [budget, both]

        - $ref: '#/components/parameters/entityIdRequiredParam'
            
        
      responses:
        '200':
          description: __GetTBDetails__ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/GLAccountBalances'
            application/xbrl+json:
              schema:
                $ref: "#/components/schemas/XbrlTbResponse"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /Periods:
    get:
      operationId: GetPeriods
      tags: [Base Module]      
      description: >
        Allows requesting the reporting periods of the company. If no parameters are passed all the available entities available to the user in the system are returned.  The end point also allows the user to pass an entity identifier to return the name of the entity.
      parameters:
        - name: startDate
          in: query
          description: Returns all reporting periods with a start date equal or greater than the start date.
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Returns all reporting periods with an end date equal or less than the end date.
          required: false
          schema:
            type: string
            format: date

        - $ref: '#/components/parameters/entityIdParam'
        
      responses:
        '200':
          description: _periods_ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Periods'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /Entities:
    get:
      operationId: GetEntities
      tags: [Base Module]      
      description: >
        Allows requesting the reporting entities available from the API.
      parameters:
        - $ref: '#/components/parameters/entityIdParam'
      responses:
        '200':
          description: _entities_ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Entities'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /GL/Accounts:
    get:
      operationId: GetChartAccounts
      tags: [General Ledger Module]      
      description: >
        Allows requesting a listing of chart of accounts 
      parameters:
        - $ref: '#/components/parameters/entityIdRequiredParam' 
        
      responses:
        '200':
          description: _GLChartOfAccounts_ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/GLChartOfAccounts'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'
  
  /AR/OpenBalances:
    get:
      operationId: GetAROpenAccountsReceivables
      tags: [Accounts Receivable]      
      description: >
        Each record represents the balance expected from the customer for one uniquely identifiable transaction. This file should be at the summary level (by invoice), not at the detailed level (by invoice line item). The sum total of the transaction amounts as of the specified date should reconcile to the total AR amount in the general ledger (GL) as of the same date.

        Should be able to pass a date and get back a list of all the invoices amounts that were outstanding at that date.
      parameters:
        - name: balanceDate
          in: query
          description: Open receivables on a given date. 
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: __GetAROpenAccountsReceivables__ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/AROpenAccountsReceivablesItems'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /AR/Customers:
    get:
      operationId: GetARCustomers
      tags: [Accounts Receivable]      
      description: >
        Allows the retrieval of the customer listing for the entity. Customer information can be requested based on a customer ID. 
      parameters:
        - $ref: '#/components/parameters/CustomerAccountIDParam'
      
      responses:
        '200':
          description: __GetARCustomers__ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Customers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /AR/Invoices:
    get:
      operationId: GetARInvoices
      tags: [Accounts Receivable]      
      description: >
        Invoices has one record for each sales order associated with each invoice. For example, if an invoice includes items from three sales orders, there will be three records for that invoice—one for the items in the invoice associated with each of the three sales orders.
      parameters:
        - $ref: '#/components/parameters/CustomerAccountIDParam'
        - name: startDate
          in: query
          description: Returns all invoices with a start date equal or greater than the start date.
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Returns all invoices with an end date equal or less than the end date.
          required: true
          schema:
            type: string
            format: date
      
      responses:
        '200':
          description: __GetARInvoices__ successfully accepted
          content:  
            application/json:
              schema:
                $ref: '#/components/schemas/Invoices'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/BadToken'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '500':
          $ref: '#/components/responses/InternalServerError'


components:
  securitySchemes:
    basicAuth:     
      type: http
      scheme: basic
    implicitAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://example.local/oauth2/authorize
          scopes:
            read: allows reading resources
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:        
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: X-API-KEY  # name of the header, query parameter or cookie
    openIdAuth:   
      type: openIdConnect
      openIdConnectUrl: https://example.local/.well-known/openid-configuration


  parameters:
    GLAccountNumberParam:
      in: query
      name: GLAccountNumber
      schema:
        type: string
        maxLength: 100
      description: The GL account number. Shall match the GLAccountNumber used in the Chart of Accounts.

    entityIdParam:
      in: query
      name: entityID
      description: Entity Identifier.  UID of the entity. Can be defined by the implementer of the API does not imply that a standard identifier is used. If no entity id identifier is provided and the requested system has multiple entities the API implementer determines entity to return. 
      required: false
      schema:
        type: string
    
    CustomerAccountIDParam:
      in: query
      name: CustomerAccountID
      description: Identifier of the customer from whom payment is expected or to whom unused credits have been applied.  
      required: false
      schema:
        type: string

    entityIdRequiredParam:
      in: query
      name: entityID
      description: Entity Identifier.  UID of the entity. Can be defined by the implementer of the API does not imply that a standard identifier is used. If no entity id identifier is provided and the requested system has multiple entities the API implementer determines entity to return. 
      required: true
      schema:
        type: string

  schemas:
    ErrorResult:
      type: object
      properties:
        code:
          type: string
          description: Implementation-defined Identifier/Code for the error being returned by the server
        errorDescription:
          type: string
          description: Provides additional human-readable description of the error. Implementation should include diagnostic detail to help the calling client to take corrective actiont to eliminate the error, if possible.
    GLJournals:
      type: array
      items:
         $ref: '#/components/schemas/GLDetails'
    GLDetails: 
      type: object
      properties:
        #In AICPA and ISO
        journalId:
          $ref: '#/components/schemas/JournalID'
        #ISO ONLY
        #JournalNumber:
        # $ref: '#/components/schemas/JournalNumber'
        #In AICPA and ISO
        fiscalYear:
          $ref: '#/components/schemas/FiscalYear'
        #In AICPA and called AccountingPeriod in ISO
        period:
          $ref: '#/components/schemas/Period'
        #In AICPA and ISO
        effectiveDate:
          $ref: '#/components/schemas/EffectiveDate'
        #ISO ONLY
        #JETypeCode:
        # $ref: '#/components/schemas/JETypeCode'
        #In AICPA and ISO
        jeHeaderDescription:
          $ref: '#/components/schemas/JEHeaderDescription'
        #In AICPA and ISO
        source:
          $ref: '#/components/schemas/Source'
        #In AICPA and ISO
        businessUnitCode:
          $ref: '#/components/schemas/BusinessUnitCode'
        #In AICPA and ISO
        reversalIndicator:
          $ref: '#/components/schemas/ReversalIndicator'
        #In AICPA and ISO
        reversalJournalId:
          $ref: '#/components/schemas/ReversalJournalID'
        #ISO ONLY 
        cancellationSign:
          $ref: '#/components/schemas/CancellationSign'
        # May be this should be changed to Created By not all journals are created by a human which entered implies.
        # The ISO standard changed it to CreatedUserId. 
        enteredBy:
          $ref: '#/components/schemas/EnteredBy'
        #In AICPA and called CreatedDate in ISO
        enteredDate:
          $ref: '#/components/schemas/CreatedDate'
        #In AICPA and called CreatedTime in ISO
        enteredTime:
          $ref: '#/components/schemas/CreatedTime'
        #AICPA ONLY
        lastModifiedBy:
          $ref: '#/components/schemas/LastModifiedBy'
        #AICPA ONLY
        lastModifiedDate:
          $ref: '#/components/schemas/LastModifiedDate'
        #In AICPA and called ApprovedPersonID in ISO
        approvedBy:
          $ref: '#/components/schemas/ApprovedPersonID'
        #In AICPA and ISO
        approvedDate:
          $ref: '#/components/schemas/ApprovedDate'
        #Added for API Specification for cases where have multiple entities.
        entityIdentifier:
          $ref: '#/components/schemas/EntityIdentifier'
        glLineItems:
          type: array
          items:
            $ref: '#/components/schemas/GLLineItem'
      required:
        - journalId
        - effectiveDate
        - glLineItems

      
    GLLineItem:
      type: object
      properties:
        #In AICPA and ISO
        glAccountNumber:
          $ref: '#/components/schemas/GLAccountNumber'
        #In AICPA and ISO
        journalIDLineNumber:
          $ref: '#/components/schemas/JournalIDLineNumber'
        #In AICPA and ISO
        jeLineDescription:
          $ref: '#/components/schemas/JELineDescription'
        #Amount in AICPA FunctionalAmount in ISO
        amount:
          $ref: '#/components/schemas/FunctionalAmount'
        #AmountCurrency in AICPA FunctionalAmount in ISO
        amountCurrency:
          $ref: '#/components/schemas/FunctionalCurrencyCode'
        #In AICPA and ISO
        reportingAmount:
          $ref: '#/components/schemas/ReportingAmount'
        #In AICPA and ISO as ReportingCurrencyCode
        reportingAmountCurrency:
          $ref: '#/components/schemas/ReportingCurrencyCode'
        #In AICPA and ISO
        localAmount:
          $ref: '#/components/schemas/LocalAmount' 
        #In AICPA and ISO as LocalCurrencyCode
        localAmountCurrency:
          $ref: '#/components/schemas/LocalCurrencyCode'
        #ISO ONLY
        transactionAmount:
          $ref: '#/components/schemas/TransactionAmount'
        #ISO ONLY
        transactionCurrency:
          $ref: '#/components/schemas/TransactionCurrencyCode'
        #AmountCreditDebitIndicator in AICPA CreditDebitIndicator in ISO
        amountCreditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
      required:
        - glAccountNumber
        - amount
        - amountCreditDebitIndicator
        - amountCurrency

    XbrlTbResponse:
      type: object
      properties:
        documentInfo:
          $ref: '#/components/schemas/DocumentInfoOimJson'
        facts:
            $ref: '#/components/schemas/FactsOimJson'
    
    DocumentInfoOimJson:
      type: object
      properties:
        documentType:
          type: string
          example: http://www.xbrl.org/WGWD/YYYY-MM-DD/xbrl-json
        features:
          type: object
          properties:
            xbrl:canonicalValues: 
              type: boolean
        prefixes:
          type: object
          additionalProperties:
            type: string
          example:
            xbrl: "http://www.xbrl.org/WGWD/YYYY-MM-DD/oim"
            p1: "http://www.xbrl.org/2003/iso4217"
            p2: "http://aicpa.org/das/us-gaap/2020-01-31"
            p3: "http://www.xbrl.org/2003/instance"
      
            
        taxonomy:
          type: array
          items:
            type: string
            example: 
              "http://www.aicpa.org/das/us-gaap/2020-01-31.xsd"
    
    FactsOimJson:
      type: object
      properties:
        value:
          type: string
        accuracy:
          type: integer
        aspects:
          type: object
          properties:
            concept: 
              type: string
            entity:
              type: string
            period:
              type: string
            unit:
              type: string
            glAccountNumber:
              $ref: '#/components/schemas/GLAccountNumber'
      example:
        xfd233befbacbc83e43d510ae01866384c65f23a60482caaa20331642: {
        "value": "151000",
        "accuracy": -3,
        "aspects": {
          "concept": "p2:ContractWithCustomers",
          "entity": "p3:0001512228",
          "period": "2015-07-01T00:00:00/2016-07-01T00:00:00",
          "unit": "p1:USD",
          "glAccountNumber": "12345678"}
        }

    GLAccountBalances:
      type: array
      items:
          $ref: '#/components/schemas/GLAccountBalance'
    GLAccountBalance: 
      type: object
      properties:
        glAccountNumber:
          $ref: '#/components/schemas/GLAccountNumber'
        #Added for API Specification for cases where have multiple entities.
        entityIdentifier:
          $ref: '#/components/schemas/EntityIdentifier'
        businessUnitCode:
          $ref: '#/components/schemas/BusinessUnitCode'
        balanceAsOfDate:
          $ref: '#/components/schemas/BalanceAsOfDate'
        fiscalYear:
          $ref: '#/components/schemas/FiscalYear'
        period:
          $ref: '#/components/schemas/Period'
        #In AICPA and called BeginningFunctionalAmount in ISO
        amountBeginning:
          $ref: '#/components/schemas/BeginningFunctionalAmount'
        #In AICPA and called BeginningReportingAmount in ISO
        amountBeginningReporting:
          $ref: '#/components/schemas/BeginningReportingAmount'
        #In AICPA and called BeginningLocalAmount in ISO
        amountBeginningLocal:
          $ref: '#/components/schemas/BeginningLocalAmount'
        #In AICPA and called FunctionalCurrencyCode in ISO
        amountCurrency:
          $ref: '#/components/schemas/FunctionalCurrencyCode'
        #In AICPA and called ReportingCurrencyCode in ISO
        amountReportingCurrency:
          $ref: '#/components/schemas/ReportingCurrencyCode'
        #In AICPA and called LocalCurrencyCode in ISO
        amountLocalCurrency:
          $ref: '#/components/schemas/LocalCurrencyCode'
        #In AICPA and called EndingFunctionalAmount in ISO
        amountEnding:
          $ref: '#/components/schemas/EndingFunctionalAmount'
        #In AICPA and called EndingReportingAmount in ISO
        amountEndingReporting:
          $ref: '#/components/schemas/EndingReportingAmount'
         #In AICPA and called EndingLocalAmount in ISO
        amountEndingLocal:
          $ref: '#/components/schemas/EndingLocalAmount'
        budgetFlag:
          $ref: '#/components/schemas/BudgetFlag'

      required:
        - glAccountNumber
        - amountBeginning
        - amountEnding
        - amountCurrency
        - balanceAsOfDate
       
    
    Periods:
      type: array
      items:
          $ref: '#/components/schemas/PeriodsDetails'
      example: [
                {
                  "periodName": "Fiscal Year Ended 2019",
                  "startDatePeriod": "2019-01-01",
                  "endDatePeriod": "2019-12-31",
                  "periodType": "Year",
                  "entityIdentifier": 123456789
                },
                {
                  "periodName": "Fiscal Year Ended 2020",
                  "startDatePeriod": "2020-01-01",
                  "endDatePeriod": "2020-12-31",
                  "periodType": "Year",
                  "entityIdentifier": 123456789
                },
                {
                  "periodName": "Fiscal Quarter Ended Q1 2020",
                  "startDatePeriod": "2020-01-01",
                  "endDatePeriod": "2020-03-31",
                  "periodType": "Quarter",
                  "entityIdentifier": 123456789
                }
              ]
    
    PeriodsDetails:
      type: object
      properties:
        periodName:
          $ref: '#/components/schemas/PeriodName'
        startDatePeriod:
          $ref: '#/components/schemas/StartDatePeriod'
        endDatePeriod:
          $ref: '#/components/schemas/EndDatePeriod'
        periodType:
          $ref: '#/components/schemas/PeriodType'
        #Added for API Specification for cases where have multiple entities.
        entityIdentifier:
          $ref: '#/components/schemas/EntityIdentifier'
      required:
        - periodName
        - startDatePeriod
        - endDatePeriod
        - periodType

    Entities:
      type: array
      items:
          $ref: '#/components/schemas/EntityDetails'
    
    EntityDetails:
      type: object
      properties:
        entityName:
          $ref: '#/components/schemas/EntityName'
        entityIdentifier:
          $ref: '#/components/schemas/EntityIdentifier'
        glSubsidiaries:
          $ref: '#/components/schemas/GLSubsidiaries'
      required:
        - entityName
        - entityIdentifier

    GLSubsidiaries:
      type: array
      items:
          $ref: '#/components/schemas/EntityDetails'

    GLChartOfAccounts:
      type: array
      items:
          $ref: '#/components/schemas/GLAccountDetails'

    GLAccountDetails:
      type: object
      properties:
        entityIdentifier:
          $ref: '#/components/schemas/EntityIdentifier'
        glAccountNumber:
          $ref: '#/components/schemas/GLAccountNumber'
        glAccountName:
          $ref: '#/components/schemas/GLAccountName'
        fsCaption:
          $ref: '#/components/schemas/FSCaption'
        accountType:
          $ref: '#/components/schemas/AccountType'
        accountSubtype:
          $ref: '#/components/schemas/AccountSubtype'
        glAccountDescription:
          $ref: '#/components/schemas/GLAccountDescription'        
        parentGLAccountNumber:
          $ref: '#/components/schemas/ParentGLAccountNumber'
        xbrlConcept:
          $ref: '#/components/schemas/XBRLConcept'
      required:
        - glAccountNumber
        - glAccountName

    AROpenAccountsReceivablesItems:
      type: array
      items:
          $ref: '#/components/schemas/AROpenAccountsReceivables'
    
    AROpenAccountsReceivables: 
      type: object
      properties:
        customerAccountId:
          $ref: '#/components/schemas/CustomerAccountID'
        transactionId:
          $ref: '#/components/schemas/TransactionID'
        invoiceId:
          $ref: '#/components/schemas/InvoiceID'
        transactionType:
          $ref: '#/components/schemas/TransactionType'
        transactionDate:
          $ref: '#/components/schemas/TransactionDate'
        transactionDueDate:
          $ref: '#/components/schemas/TransactionDueDate'
        balanceAmount:
          $ref: '#/components/schemas/FunctionalBalance'
        balanceamountCurrency:  
          $ref: '#/components/schemas/FunctionalCurrencyCode'
        balanceAmountReporting:
          $ref: '#/components/schemas/ReportingBalance'
        balanceReportingCurrency:
          $ref: '#/components/schemas/ReportingCurrencyCode'
        balanceAmountLocal:
          $ref: '#/components/schemas/LocalBalance'
        balanceLocalCurrency:
          $ref: '#/components/schemas/LocalCurrencyCode'
        originalBalanceAmount:
          $ref: '#/components/schemas/FunctionalAmount'
        originalBalanceAmountLocal:
          $ref: '#/components/schemas/LocalAmount'
        originalBalanceAmountReporting:
          $ref: '#/components/schemas/ReportingAmount'
        amountCreditDebitIndicator:
          $ref: '#/components/schemas/CreditDebitIndicator'
    
    Customers:
      type: array
      items:
          $ref: '#/components/schemas/Customer'
    
    Customer:
      type: object
      properties:
        customerAccountId:
          $ref: '#/components/schemas/CustomerAccountID'
        customerAccountName:
          $ref: '#/components/schemas/CustomerAccountName'
        customerTIN:
          $ref: '#/components/schemas/CustomerTIN'
        customerPhysicalStreetAddress1:
          $ref: '#/components/schemas/CustomerStreetAddress1'
        customerPhysicalStreetAddress2:
          $ref: '#/components/schemas/CustomerStreetAddress2'
        customerPhysicalCity:
          $ref: '#/components/schemas/CustomerCity'
        customerPhysicalZipPostalCode: 
          $ref: '#/components/schemas/CustomerPhysicalPostalCode'
        customerPhysicalCountry:
          $ref: '#/components/schemas/CustomerCountry'
        customerBillingAddress1:
          $ref: '#/components/schemas/CustomerBillingAddress1'
        customerBillingAddress2:
          $ref: '#/components/schemas/CustomerBillingAddress2'
        customerBillingCity:
          $ref: '#/components/schemas/CustomerBillingCity'
        customerBillingZipPostalCode:
          $ref: '#/components/schemas/CustomerBillingPostalCode'
        customerBillingCountry:
          $ref: '#/components/schemas/CustomerBillingCountry'
        customerEmail:
          $ref: '#/components/schemas/CustomerEmail'
        customerDomainAddress:
          $ref: '#/components/schemas/CustomerDomainAddress'
        customerActiveStatus:
          $ref: '#/components/schemas/CustomerActiveStatus'
        transactionCreditLimit:
          $ref: '#/components/schemas/TransactionCreditLimit'
        customerCreditLimit:
          $ref: '#/components/schemas/CustomerCreditLimit'
        customerTermsDueDays:
          $ref: '#/components/schemas/CustomerTermsDueDays'
        customerenteredBy:
          $ref: '#/components/schemas/EnteredBy'


    Invoices:
      type: array
      items:
          $ref: '#/components/schemas/Invoice'

    Invoice:
      type: object
      properties:
        invoiceId:
          $ref: '#/components/schemas/InvoiceID'
        invoiceNumber:
          $ref: '#/components/schemas/InvoiceNumber'
        invoiceDate:
          $ref: '#/components/schemas/InvoiceDate'
        invoiceFiscalYear:
          $ref: '#/components/schemas/FiscalYear'
        invoicePeriod: 
          $ref: '#/components/schemas/Period'
        invoiceTypeName:
          $ref: '#/components/schemas/InvoiceTypeName'
        invoiceDueDate:
          $ref: '#/components/schemas/InvoiceDueDate'
        customerAccountId:
          $ref: '#/components/schemas/CustomerAccountID'
        settlementMethodCode:
          $ref: '#/components/schemas/SettlementMethodCode'
        invoiceAmount:
          $ref: '#/components/schemas/InvoiceTransactionAmount'
        invoiceAmountCurrency:
          $ref: '#/components/schemas/InvoiceTransactionCURCode'
        paymentTermCode:
          $ref: '#/components/schemas/PaymentTermCode'
        enteredBy:
          $ref: '#/components/schemas/EnteredBy'
        tax1TypeCode:
          $ref: '#/components/schemas/Tax1TypeCode'
        tax1TransactionAmount:
          $ref: '#/components/schemas/Tax1TransactionAmount'


 # This is where all the field properties are defined

    BalanceAsOfDate:
      type: string  
      format: date
      description: The date through which the provided balance reflects account activity. EXAMPLE If a report was run for activity through 2014-12-31 on 2015-01-22, the date recorded would be 20141231. .
      example: "2018-12-31"

    BeginningFunctionalAmount:
      type: number
      format: float
      nullable: true
      example: 100
      description: Beginning balance amount of the period (same amount as the ending  balance from the prior period after opening journal entries)  recorded in the functional or group  currency. No multi-currency  translation should be performed on  this amount because all are recorded  in a single currency.

    BeginningReportingAmount:
      type: number
      format: float
      nullable: true
      example: 100
      description: Beginning balance amount for the  period (same amount as the ending  balance from the prior period after opening journal entries) recorded in the currency used for  statutory reporting.

    BeginningLocalAmount:
      type: number
      format: float
      nullable: true
      example: 100
      description: Beginning balance amount for the  period in the local currency used for  multi-currency tracking.

    EndingFunctionalAmount:
      type: number
      format: float
      example: 100
      description: Ending balance amount for the period  recorded in the functional or group  currency. No multi-currency  translation should be performed on  this amount because all are recorded  in a single currency.

    EndingReportingAmount:
      type: number
      format: float
      example: 100
      description: Ending balance amount for the period  in the currency used for statutory  reporting.

    EndingLocalAmount:
      type: number
      format: float
      example: 100
      description: Ending balance amount for the period  in local currency used for multi-currency tracking.


    BudgetFlag:
      type: string
      enum: [budget, actual]
      example: actual
      description: Indicates if the trial balance amount is an actual amount or a budget amount. If this field is missing from the return result then the value is presumed to be actual.
      
    JournalID:
      type: string
      maxLength: 100
      description: The unique identifier for the journal entry. Typically auto-generated by the system.
      example: '1234abc'
      x-AICPA-Audit-Data-Std: 'JournalID'

    JournalNumber:
      type: string
      maxLength: 100
      description: The number of the journal entry; for example, including serial number,document type, and date.
      x-AICPA-Audit-Data-Std: 'none'
    
    GLAccountNumber:
      type: string
      maxLength: 100
      description: The GL account number defined in the chart of accounts. Matches AICPA Audit Data Standard element GLAccountNumber.
      example: 1234-567-890
      x-AICPA-Audit-Data-Std: 'GLAccountNumber'
    
    FiscalYear:
      type: string
      minLength: 4
      maxLength: 4
      description: |
        Fiscal year in which the EffectiveDate occurs. The year shall be shown in four digits as “YYYY”, which is part of the extended format and the “YYYYMM-DD” in ISO 8601:2004. Matches AICPA Audit Data Standard element FiscalYear.
      example: 2019
      x-AICPA-Audit-Data-Std: 'FiscalYear'

    Period:
      type: string
      maxLength: 15
      description: Fiscal period in which the effective date occurs. This is the period defined by the company and is not a standardized format. Examples include W1–W53 for weekly periods, M1–M12 for monthly periods,  Q1–Q4 for quarterly periods and Year for Year. Matches AICPA Audit Data Standard element Period.
      example: Year
      x-AICPA-Audit-Data-Std: 'Period'

    PeriodName:
      type: string
      description: The name of the period as defined by the entity providing the reporting period.
      example: Fiscal Year Ended 2019

    StartDatePeriod:
      type: string
      format: date
      description: The date that the defined reporting period started as defined by the entity providing the reporting period.
      example: '2019-01-01'

    EndDatePeriod:
      type: string
      format: date
      description: The date that the defined reporting period ended as defined by the entity providing the reporting period.
      example: '2019-12-31'
    

    PeriodType:
      type: string
      description: The type of period defined. For example Quarter, Year Half Year.
      enum: [Year, Quarter, HalfYear, 52Weeks, 3QCum, Month, 13Months, Other]
      example: 'Year'

    EntityName:
      type: string
      description: The name of the entity for which the GL information is applicable.
      example: ABC-CO

    EntityIdentifier:
      type: string
      description: The uid of the entity.
      example: 123456789

    EffectiveDate:
      type: string
      format: date
      description: The date of the journal entry, no matter when the entry is received or created. This sometimes refers to the accounting date or accounting effective date; for example, if the user wants to see the financial results for the period ending March 5, 20X1, the journal entry may be created on any day during the open period and be assigned to the period ending March 5, 20X1. Matches AICPA Audit Data Standard element EffectiveDate.
      example: "2018-12-31"
      x-AICPA-Audit-Data-Std: 'EffectiveDate'

    JournalIDLineNumber:
      type: string
      maxLength: 100
      example: 1
      description: Identifier that is unique for each line within a journal entry. Matches AICPA Audit Data Standard element JournalIDLineNumber.
      x-AICPA-Audit-Data-Std: 'JournalIDLineNumber'

    JETypeCode:
      type: string
      maxLength: 60
      example:
      description: The code of journal entry type.
      x-AICPA-Audit-Data-Std: 'none'

    JEHeaderDescription:
      type: string
      maxLength: 1000
      description: Description of the entire journal entry as described by the journal entry header. Matches AICPA Audit Data Standard element JEHeaderDescription.
      example: "My first json Journal"
      x-AICPA-Audit-Data-Std: 'JEHeaderDescription'

    JELineDescription:
      type: string
      maxLength: 1000
      example: Book to accrual account
      description: Description of the individual line within the journal entry. Matches AICPA Audit Data Standard element JELineDescription.
      x-AICPA-Audit-Data-Std: 'JELineDescription'

    Source:
      type: string
      maxLength: 25
      example: "Sales journal"
      description: Code for source from which the journal entry originated. EXAMPLE Sales journal, cash receipts journal, general journal, payroll journal, accountant manual entry, or spreadsheet. Matches AICPA Audit Data Standard element Source.
      x-AICPA-Audit-Data-Std: 'Source'

    BusinessUnitCode:
      type: string
      maxLength: 25
      example: "WidgetGroup"
      description: Used to identify the business unit, region, branch, and so on at the level that financial statements are being audited and for which the trial balance is generated. For example, you may use a code aligned with the concept of a reportable segment as defined in Financial Accounting Standards Board (FASB) Accounting Standards Codification (ASC) 280, Segment Reporting. Matches AICPA Audit Data Standard element BusinessUnitCode.
      x-AICPA-Audit-Data-Std: 'BusinessUnitCode'


    FunctionalAmount:
      type: number
      format: float
      nullable: true
      example: 100
      description: Transaction monetary amount recorded in the functional or group currency. No multi-currency translation should be performed on this amount because all transactions are recorded in a single currency. Matches AICPA Audit Data Standard element BusinessUnitCode.
      x-AICPA-Audit-Data-Std: 'Amount'


    ReportingAmount:
      type: number
      format: float
      nullable: true
      example: 100      
      description: Transaction monetary amount recorded in the reporting currency. Matches AICPA Audit Data Standard element ReportingAmount.
      x-AICPA-Audit-Data-Std: 'ReportingAmount'

    ReportingCurrencyCode:
      type: string
      maxLength: 3
      minLength: 3
      example: "USD"
      description: The code of currency used for nonconsolidated reporting as opposed to functional, consolidated reporting, local or actual amounts (ISO 4217:2015). Matches AICPA Audit Data Standard element ReportingAmountCurrency.
      x-AICPA-Audit-Data-Std: 'ReportingAmountCurrency'

    LocalAmount:
      type: number
      format: float
      nullable: true
      example: 100
      description: Amount in the local country currency where the transaction originated. Matches AICPA Audit Data Standard element LocalAmount.
      x-AICPA-Audit-Data-Std: 'LocalAmount'

    LocalCurrencyCode:
      type: string
      maxLength: 3
      minLength: 3
      example: "USD"
      description: The currency used for local country reporting requirements in ISO-4217 format. Matches AICPA Audit Data Standard element LocalAmountCurrency.
      x-AICPA-Audit-Data-Std: 'LocalAmountCurrency'      
    
    TransactionAmount:
      type: number
      format: float
      nullable: true
      example: 100      
      description: Amount in the transaction currency.
      x-AICPA-Audit-Data-Std: 'none'

    CreditDebitIndicator:
      type: string
      maxLength: 1
      example: "C"
      description: This indicates whether the amount is a credit or a debit. EXAMPLE C=credit; D=debit. Matches AICPA Audit Data Standard element AmountCreditDebitIndicator.
      enum: [C,D]
      x-AICPA-Audit-Data-Std: 'AmountCreditDebitIndicator'

    ReversalIndicator:
      type: string
      maxLength: 1
      example: "1"
      description: Indicates whether this entry is a reversal or to be reversed. EXAMPLE 1 = entry is a reversal, 2 = entry is being reversed, and empty (“”) = none of the above or system generated indicators. Matches AICPA Audit Data Standard element ReversalIndicator.
      x-AICPA-Audit-Data-Std: 'ReversalIndicator'

    ReversalJournalID:
      type: string
      maxLength: 100
      example: "sales"
      description: The code value or indicator of the settlement method used for cash receipt from customers (i.e. sales) and cash payment to suppliers (i.e. purchase); for example, check, wire transfer and cash. Matches AICPA Audit Data Standard element ReversalJournalID.
      x-AICPA-Audit-Data-Std: 'ReversalJournalID'
      
    CancellationSign:
      type: boolean
      description: The sign of cancellation of a journal entry already formed but not yet posted. EXAMPLE False=entry is not cancelled, True=entry is cancelled.
      x-AICPA-Audit-Data-Std: 'none'
      
    EnteredBy:
      type: string
      maxLength: 25
      description: The unique identifier for the person or process that created the record. Matches AICPA Audit Data Standard element EnteredBy.
      example: "John Smith"
      x-AICPA-Audit-Data-Std: 'EnteredBy'
    
    CreatedDate:
      type: string
      format: date
      description: The date the journal entry was created in the system. This sometimes refers to the creation date. This should be a system-generated date (rather than user-created date), when possible. This date does not necessarily correspond with the date when the journal entry was posted to the GL or the period-end date. Matches AICPA Audit Data Standard element EnteredDate.
      example: "2019-01-01"
      x-AICPA-Audit-Data-Std: 'EnteredDate'
      
    CreatedTime:
      type: string
      format: time
      description: The time the journal entry was created in the system. Matches AICPA Audit Data Standard element EnteredTime.
      example: '2018-12-31'
      x-AICPA-Audit-Data-Std: 'EnteredTime'

    LastModifiedBy:
      type: string
      maxLength: 25
      description: UserID (from UserListing file) for the last person modifying this entry. Matches AICPA Audit Data Standard element LastModifiedBy.
      example: "Sam Smith"
      x-AICPA-Audit-Data-Std: 'LastModifiedBy'
    
    LastModifiedDate:
      type: string
      format: date
      description: The date the entry was last modified before posting. Matches AICPA Audit Data Standard element LastModifiedDate.
      example: "2019-01-01"
      x-AICPA-Audit-Data-Std: 'LastModifiedDate'
    
    ApprovedPersonID:
      type: string
      maxLength: 25
      description: The unique identifier for the person who approved the entry. Typically auto-generated by the system.  Matches AICPA Audit Data Standard element ApprovedBy.
      example: "123456"
      x-AICPA-Audit-Data-Std: 'ApprovedBy'
      
    ApprovedDate:
      type: string
      format: date
      description: The date the entry was approved. Matches AICPA Audit Data Standard element ApprovedDate.
      example: '2018-12-31'
      x-AICPA-Audit-Data-Std: 'ApprovedDate'
      

    TransactionCurrencyCode:
      type: string 
      maxLength: 3
      minLength: 3
      description: The currency used in actual transaction (ISO 4217:2015).
      example:

    FunctionalCurrencyCode:
      type: string
      maxLength: 3
      minLength: 3
      example: "USD"
      description: The code of functional or group currency related to the amount (ISO 4217:2015). Matches AICPA Audit Data Standard element AmountCurrency.
      x-AICPA-Audit-Data-Std: 'AmountCurrency'

    GLAccountName:
      type: string
      maxLength: 100
      description: The name of the GL account.
      example:

    FSCaption:
      type: string
      maxLength: 100
      description: The financial statement caption represents a related group of accounts. EXAMPLE Cash and cash equivalents, accounts payable and cost of sales. The caption can be at the trial balance level.
      example:

    AccountType:
      type: string
      maxLength: 25
      description: The type of account. EXAMPLE Assets, Liabilities, Equity, Revenue and Expense. 
      example: Asset

    AccountSubtype:
      type: string
      maxLength: 25
      description: The subtype of the account. EXAMPLE Current assets are the subtype of assets.
      example:

    GLAccountDescription:
      type: string
      maxLength: 256
      description: Label or description associated with GLAccountNumber.
      example: Finished goods inventory held by the company.

    ParentGLAccountNumber:
      type: string
      maxLength: 100
      description: A reference to the GLAccountNumber that is the parent in an account hierarchy. Provided to allow more than the predefined levels of hierarchy in the chart of accounts table.
      example:

    XBRLConcept:
      type: string
      description: XBRL concept associated with the account with the namespace in clark notation.
      example: '{http://fasb.org/us-gaap/2020-01-31}InventoryFinishedGoods'


    TransactionID:
      type: string
      maxLength: 60
      description: The unique identifier for the transaction of an open AR includes invoice and cash received. Typically auto-generated by the system. Unique identifier for each invoice. This ID may need to be created by concatenating fields (for example, document number, document type, and year) to uniquely identify each transaction. The same ID must be used for all tables with invoice data(Invoices_Generated_YYYYMMDD_YYYYMMDD,Open_Accounts_Receivable_YYYYMMDD,AR_Cash_Application_YYYYMMDD_YYYYMMDD, and AR_Adjustments_YYYYMMDD_YYYYMMDD).

      example: 1234567890

    TransactionType:
      type: string
      maxLength: 60
      description: The code value or indicator of the method by which the transaction debit or credit amount was extinguished or apportioned to the debt by the customer (for example, check, wire transfer, cash, credit memo, invoice, interest-only invoice, and so on). If not provided, defaults to invoice.
      example: 'cash'
      enum: [credit, cash, invoice, adjustment, other ]

    InvoiceID:
      type: string
      maxLength: 100
      description: The unique identifier for the invoice, from which AR is derived. Typically auto-generated by the system. May be set to NULL if adjustment is at customer (not invoice) level. Otherwise shall match the InvoiceID in the SAL_Invoices_Generated table.
      example: 1234567890

    InvoiceNumber:
      type: string
      maxLength: 100
      description: Identification number for an internally generated invoice.
      example: 1234567890

    InvoiceTypeName:
      type: string
      maxLength: 60
      description: The name of the invoice type. The documents are classified according  to business content.
      example:

    InvoiceDate:
      type: string
      format: date
      maxLength: 10
      description: The date of the invoice, regardless of the date the invoice is created. This is the date from which the due date is calculated based on the invoice terms.
      example:

    InvoiceDueDate:
      type: string
      format: date
      maxLength: 10
      description: The date payment is due from the customer. Aging of a receivable is usually calculated based on this date.
      example:

    InvoiceTransactionAmount:
      type: number
      format: float
      description: The transaction monetary amount  recorded in the functional or group currency. No multi-currency translation should be performed on this amount because all transactions are recorded in a single currency.
      example:

    InvoiceTransactionCURCode:
      type: string
      maxLength: 3
      description: The transactional currency appeared in the invoice (ISO 4217:2015). Shall match the CurrencyCode in the BAS_Currency table.
      example:

    PaymentTermCode:
      type: string
      maxLength: 80
      description: The code of the payment term. Shall match the PaymentTermCode in the BAS_Payment_Term table; for example, cash on delivery, payment 30 days after delivery date.
      example:

    Tax1TypeCode:
      type: string
      maxLength: 25
      description: Code for Tax1 type. This field shall match the TaxTypeCode in the BAS_Tax_Type table.
      example:

    Tax1TransactionAmount:
      type: number
      format: float
      description: The amount of Tax1 included in the transaction. Recorded in transaction currency.
      example: 

    SettlementMethodCode:
      type: string
      maxLength: 60
      example: "sales"
      description: The code value or indicator of the settlement method used for cash receipt from customers (i.e. sales) and cash payment to suppliers (i.e. purchase); for example, check, wire transfer and cash. Shall match the SettlementMethodCode in the BAS_Settlement_Method table.
      

    CustomerAccountID:
      type: string
      maxLength: 100
      description: The unique identifier for the customer payment is expected or to whom unused credits have been applied. Typically auto-generated by the system. Shall match the CustomerAccountID in the BAS_Customer table.
      example: 123456

    TransactionDate:
      type: string
      format: date
      maxLength: 10
      minLength: 10
      description: The date of the transaction, regardless of the date the transaction is created. This is the date from which the due date is calculated based on the invoice terms.
      example: '2018-12-31'

    TransactionDueDate:
      type: string
      format: date
      maxLength: 10
      minLength: 10
      description: The date payment is due from the customer. Not all transactions will have a due date. May be set to NULL, if there is no due date. EXAMPLE Credit memos. Aging of a receivable is usually calculated based on this date.
      example: '2018-12-31'

    FunctionalBalance:
      type: number
      description: Balance monetary amount recorded in the functional or group currency. The balance here refers to the remaining balance unreceived or needing settlement, which can be calculated by analyzing net of the originating invoice and any cash received and adjustments against it. No multicurrency translation should be performed on this amount because all transactions are recorded in a single currency.
      example:

    TransactionBalance:
      type: number
      description: Balance monetary amount recorded in the transaction currency. The balance here refers to the remaining balance unreceived or needing settlement, which can be calculated by analyzing net of the originating invoice and any cash received and adjustments against it.
      example: '253.23'

    ReportingBalance:
      type: number
      description: Balance monetary amount recorded in the reporting currency.
      example: '253.23'

    LocalBalance:
      type: number
      description: Balance monetary amount in local currency. The balance here refers to the remaining balance unreceived or needing settlement, which can be calculated by analyzing net of the originating invoice and any cash received and adjustments against it.
      example: '253.23'

    CustomerAccountName:
      type: string
      maxLength: 100
      description: The name of the customer.
      example:

    CustomerTIN:
      type: string
      maxLength: 100
      description: The customer’s tax identification number. This number is usually generated by tax regulator.
      example:

    CustomerStreetAddress1:
      type: string
      maxLength: 100
      description: Line 1 of the customer’s physical street address.

    CustomerStreetAddress2:
      type: string
      maxLength: 100
      description: Line 2 of the customer’s physical street address.
      example:

    CustomerCity:
      type: string
      maxLength: 100
      description: The physical city where the customer is located.

    CustomerPhysicalPostalCode:
      type: string
      maxLength: 100
      description: The postal code of the city where the customer is physically located.
      example:

    CustomerCountry:
      type: string
      maxLength: 3
      description: The country code where the customer is physically located (ISO 3166-1).
      example:

    CustomerBillingAddress1:
      type: string
      maxLength: 100
      description: Line 1 of the customer’s billing address.
      example:
  
    CustomerBillingAddress2:
      type: string
      maxLength: 100
      description: Line 2 of the customer’s billing address.
      example:

    CustomerBillingCity:
      type: string
      maxLength: 100
      description: The billing city of the customer.

    CustomerBillingPostalCode:
      type: string
      maxLength: 20
      description: The billing postal code of the customer’s city.
      example:

    CustomerBillingCountry:
      type: string
      maxLength: 3
      description: The billing country code of the customer (ISO 3166-1).
      example:

    CustomerEmail:
      type: string
      description: Email address of the primary customer contact.
      example: 'joeSmith@example.com'

    CustomerDomainAddress:
      type: string
      description: Web domain address of the customer.
      example: 'www.example.com'

    CustomerActiveStatus:
      type: boolean
      description: Indicates if the customer is active.
      example:

    TransactionCreditLimit:
      type: number
      description: The per invoice credit limit established for this customer.
      example: '2500'

    CustomerCreditLimit:
      type: number
      description: The credit limit for this customer’s total outstanding balance.
      example: '2500'

    CustomerTermsDueDays:
      type: number
      description: The number of days allowed to meet the obligation before an invoice becomes overdue.
      example: '30'

  responses:
    BadRequest:
      description: >
        Malformed request or missing fields. Check that Content-Type matches the format/encoding, and that all required fields are spelled correctly, have correct types, and valid values. 
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example:
            code: BadRequest
            ErrorDescription: Parameter field invalid.
    BadToken:
      description: The token is invalid, expired, or corrupted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example:
            code: Unauthorized,
            ErrorDescription: Cannot convert access token to JSON
    Unauthorized:
      description: >
        Bad credentials, or could not read credentials due to malformed JSON.
         * "Full authentication is required..." -> malformed JSON
         * "Bad client credentials" -> clientId/clientSecret pair invalid
         * "Bad credentials" -> username/password pair invalid
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example:
            code: Unauthorized
            ErrorDescription: Full authentication is required to access this resource
    NotFound:
      description: This resource doesn't exist or you don't have the permissions to view it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example: 
            code: NotFound
            ErrorDescription: An entity with that name could not be found.
    MethodNotAllowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example: 
            code: MethodNotAllowed
            ErrorDescription: Request method 'DELETE' not supported
    InternalServerError:
      description: Internal error, not the fault of the client.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
          example: 
            code: internalError
            ErrorDescription: Unknown error, try again later

